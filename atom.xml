<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
   <title>WebCraft</title>
   <link href="http://webcraft.malei.tk/atom.xml" rel="self" type="application/atom+xml"/>
   <link href="http://webcraft.malei.tk" rel="alternate" type="text/html" />
   <updated>2013-03-30T02:08:21+08:00</updated>
   <id>http://webcraft.malei.tk</id>
   <author>
     <name>Lei Ma</name>
     <email>leiman0311@gmail.com</email>
   </author>

   
   <entry>
     <title>wine 你懂的</title>
     <link href="http://webcraft.malei.tk/articles/ubuntu-wine"/>
     <updated>2013-03-06T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/ubuntu-wine</id>
     <content type="html">&lt;h2&gt;bug:=。=:solve&lt;/h2&gt;

&lt;p&gt;you know, my ubuntu =&gt; 12.10 64bit&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/articles/ubuntu-wine/wine.png&quot; title=&quot;wine logo&quot; alt=&quot;wine logo&quot; /&gt; Wine Cheers!&lt;/p&gt;

&lt;h3&gt;bug详情：&lt;/h3&gt;

&lt;p&gt;p11-kit: couldn't load module: /usr/lib/i386-linux-gnu/pkcs11/gnome-keyring-pkcs11.so: /usr/lib/i386-linux-gnu/pkcs11/gnome-keyring-pkcs11.so: 无法打开共享对象文件: 没有那个文件或目录&lt;/p&gt;

&lt;h3&gt;解决方案：&lt;/h3&gt;

&lt;p&gt;1) 安装 getlibs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://launchpadlibrarian.net/53907140/getlibs_2.06-0ubuntu1~ppa2_all.deb
sudo dpkg -i getlibs_2.06-0ubuntu1~ppa2_all.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2)安装 32bit 库:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo getlibs -p gnome-keyring:i386
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果遇到此错误:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to download file http://mirrors.kernel.org/ubuntu/pool/main/g/gnome-keyring/gnome-keyring_3.4.1-4ubuntu1~precise1_i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;请在这下载:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;wget https://launchpad.net/~gnome3-team/+archive/gnome3/+files/gnome-keyring_3.4.1-4ubuntu1~precise1_i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;getlibs -i &quot;path-of-the-file&quot;/gnome-keyring_3.4.1-4ubuntu1~precise1_i386.deb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果所给链接损坏，请在这搜：https://launchpad.net&lt;/p&gt;

&lt;p&gt;3) 生成符号链接:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /usr/lib/i386-linux-gnu/pkcs11/ 
sudo ln -s /usr/lib32/i386-linux-gnu/pkcs11/gnome-keyring-pkcs11.so /usr/lib/i386-linux-gnu/pkcs11/gnome-keyring-pkcs11.so
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;O啦!&lt;/p&gt;

&lt;h3&gt;当遇到这个bug时&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;fixme:winediag:AUDDRV_GetAudioEndpoint Winepulse is not officially supported by the wine project
fixme:winediag:AUDDRV_GetAudioEndpoint For sound related feedback and support, please visit http://ubuntuforums.org/showthread.php?t=1960599
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;bug中给了链接，照着链接中的做，可解&lt;/p&gt;

&lt;h2&gt;几个常用命令&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;winecfg
winefile
wine uninstaller
wine xxoo.exe
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;结论&lt;/h2&gt;

&lt;p&gt;wine 不如 virtualbox 安装的 xp 好用&lt;/p&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://help.ubuntu.com/community/Wine&quot; title=&quot;Wine Documentation&quot;&gt;Wine Documentation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://askubuntu.com/questions/127848/wine-cant-find-gnome-keyring-pkcs11-so&quot; title=&quot;Wine can't find gnome-keyring-pkcs11.so&quot;&gt;Wine can't find gnome-keyring-pkcs11.so&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ubuntuforums.org/showthread.php?t=1960599&quot; title=&quot;winepulse&quot;&gt;Winepulse&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>传说中的 screen</title>
     <link href="http://webcraft.malei.tk/articles/screen-sh"/>
     <updated>2013-03-06T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/screen-sh</id>
     <content type="html">&lt;h2&gt;基本语法&lt;/h2&gt;

&lt;p&gt;Screen是一个可以在多个进程之间多路复用一个物理终端的窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;screen [-AmRvx -ls -wipe][-d &amp;lt;作业名称&amp;gt;][-h &amp;lt;行数&amp;gt;][-r &amp;lt;作业名称&amp;gt;][-s ][-S &amp;lt;作业名称&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;参数说明&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;-A              将所有的视窗都调整为目前终端机的大小。
-d &amp;lt;作业名称&amp;gt;       将指定的screen作业离线。
-h &amp;lt;行数&amp;gt; 　     指定视窗的缓冲区行数。
-m              即使目前已在作业中的screen作业，仍强制建立新的screen作业。
-r &amp;lt;作业名称&amp;gt;       恢复离线的screen作业。
-R              先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。
-s              指定建立新视窗时，所要执行的shell。
-S &amp;lt;作业名称&amp;gt;   指定screen作业的名称。
-v              显示版本信息。
-x              恢复之前离线的screen作业。
-ls或--list    显示目前所有的screen作业。
-wipe           检查目前所有的screen作业，并删除已经无法使用的screen作业。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;nohup vs screen&lt;/h3&gt;

&lt;p&gt;如果我们可以忽略SIGHUP信号，关掉窗口应该就不会影响程序的运行了。nohup命令可以达到这个目的，如果程序的标准输出/标准错误是终端，nohup默认将其重定向到nohup.out文件。值得注意的是nohup命令只是使得程序忽略SIGHUP信号，还需要使用标记&amp;amp;把它放在后台运行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;nohup &amp;lt;command&amp;gt; [argument…] &amp;amp;

//我最常用nohup的地方就是开启 goagent 代理
$ !nohup //执行最近执行的一条 nohup 命令，我最近的一条通常都是 nohup python ~/programs/goagent/local/proxy.py &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虽然nohup很容易使用，但还是比较“简陋”的，对于简单的命令能够应付过来，对于复杂的需要人机交互的任务就麻烦了。&lt;/p&gt;

&lt;h2&gt;快捷键&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;C-a ?   显示所有键绑定信息 //貌似我的 ubuntu 这条没反应啊
C-a w   显示所有窗口列表
C-a C-a 切换到之前显示的窗口
C-a c   创建一个新的运行shell的窗口并切换到该窗口
C-a n   切换到下一个窗口
C-a p   切换到前一个窗口(与C-a n相对)
C-a 0..9    切换到窗口0..9
C-a a   发送 C-a 到当前窗口
C-a d   暂时断开screen会话
C-a k   杀掉当前窗口  =。=
C-a [   进入拷贝/回滚模式
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;一个小例子&lt;/h2&gt;

&lt;p&gt;你可以不中断screen窗口中程序的运行而暂时断开（detach）screen会话，并在随后时间重新连接（attach）该会话，重新控制各窗口中运行的程序&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ &amp;gt;screen.test
$ screen vi screen.test //作为测试，随便敲点东西，然后键入 C-a d
  [detached from 4804.pts-0.malei-Inspiron-N4010]
$ screen -ls
  There is a screen on:
    4804.pts-0.malei-Inspiron-N4010 (2013年03月06日 17时52分03秒) (Detached)
  1 Socket in /var/run/screen/S-malei.

$ screen -r 4804.pts-0.malei-Inspiron-N4010 //4804 [tab] 补全即可(进入我们断开的绘画继续工作) C-a d
  [detached from 4804.pts-0.malei-Inspiron-N4010]
$ screen -ls
  There is a screen on:
    4804.pts-0.malei-Inspiron-N4010 (2013年03月06日 17时52分04秒) (Detached)
  1 Socket in /var/run/screen/S-malei.

//发现时间，暂停了 =。= 有木有  =========&amp;gt; 靠，颜色高亮好混乱啊
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果screen的进程打开的比较多，为了方便识别不同的screen，可以加上 -S 参数，给每个screen不同的
名称 比如 &lt;code&gt;screen -S test&lt;/code&gt; ,进程里就会看到这个screen被标为 &lt;code&gt;test.pts-0.host&lt;/code&gt; ,而不是进程ID了。&lt;/p&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.gnu.org/software/screen/manual/screen.html&quot; title=&quot;screen命令官方文档&quot;&gt;screen命令官方文档&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html&quot; title=&quot;linux screen 命令详解&quot;&gt;linux screen 命令详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ibm.com/developerworks/cn/linux/l-cn-screen/&quot; title=&quot;使用 screen 管理你的远程会话&quot;&gt;使用 screen 管理你的远程会话&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>xrandr 命令小用</title>
     <link href="http://webcraft.malei.tk/articles/ubuntu-xrandr-sh"/>
     <updated>2013-03-04T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/ubuntu-xrandr-sh</id>
     <content type="html">&lt;h2&gt;外接设备一览&lt;/h2&gt;

&lt;p&gt;在终端输入 &lt;code&gt;xrandr&lt;/code&gt; ：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LVDS connected (normal left inverted right x axis y axis)
   1366x768       60.0 +
   1360x768       60.0  
   1280x768       60.0  
   1280x720       60.0  
   1024x768       60.0  
   1024x600       60.0  
   800x600        60.0  
   800x480        60.0  
   640x480        60.0  
DFP1 disconnected (normal left inverted right x axis y axis)
CRT1 connected 1920x1080+0+0 (normal left inverted right x axis y axis) 510mm x 287mm
   1920x1080      60.0*+
   1680x1050      60.0  
   1400x1050      60.0  
   1600x900       60.0  
   1280x1024      75.0     60.0  
   1440x900       60.0  
   1280x960       75.0     60.0  
   1152x864       60.0     75.0  
   1280x768       75.0     60.0  
   1280x720       75.0     60.0  
   1024x768       75.0     60.0  
   1024x600       75.0     60.0  
   800x600        75.0     60.3  
   800x480        75.0     60.3  
   640x480        75.0     59.9 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;说明：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LVDS 就是笔记本的显示器输出(Low Voltage Differential Signaling，是一种低压差分信号技术接口)
DTP1 就是笔记本的HDMI端口(High Definition Multimedia Interface，中文名称是高清晰多媒体接口)
CRT1 就是笔记本上的VGA端口(Video Graphics Array，即视频图形阵列) =。= CRT是一种使用阴极射线管(Cathode Ray Tube）的显示器
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;xrandr 命令常用方式如下：&lt;/h2&gt;

&lt;p&gt;打开外接显示器(最高分辨率)，与笔记本液晶屏幕显示同样内容（克隆）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrandr --output CRT1 --same-as LVDS --auto  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开外接显示器(分辨率为1024x768)，与笔记本液晶屏幕显示同样内容（克隆）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrandr --output CRT1 --same-as LVDS --mode 1024x768  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开外接显示器(最高分辨率)，设置为右侧扩展屏幕:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrandr --output CRT1 --right-of LVDS --auto  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关闭外接显示器:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrandr --output CRT1 --off  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;打开外接显示器，同时关闭笔记本液晶屏幕（只用外接显示器工作）:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrandr --output CRT1 --auto --output LVDS --off  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;关闭外接显示器，同时打开笔记本液晶屏幕 (只用笔记本液晶屏)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;xrandr --output CRT1 --off --output LVDS --auto  
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;小结&lt;/h2&gt;

&lt;p&gt;由于在图形界面配置总是报错，所以。。。；如果命令没达到你想要的效果重启一下就可以了，貌似这里有问题，待测试：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先连VGA线，再开机&lt;/li&gt;
&lt;li&gt;先开机，再连VGA线&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;经测试，对于我这个悲催的 &lt;code&gt;A卡&lt;/code&gt; 来说，&lt;code&gt;先连VGA线，再开机&lt;/code&gt; 是个不错的选择.&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>Drupal 主题开发</title>
     <link href="http://webcraft.malei.tk/articles/drupal-theme"/>
     <updated>2013-03-04T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/drupal-theme</id>
     <content type="html">&lt;h2&gt;Drupal的预处理函数&lt;/h2&gt;

&lt;p&gt;ads&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>菜鸟学习linux</title>
     <link href="http://webcraft.malei.tk/articles/linux-study"/>
     <updated>2013-03-02T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/linux-study</id>
     <content type="html">&lt;h2&gt;总述&lt;/h2&gt;

&lt;p&gt;昨天重装系统:64位ubuntu（为了便于开发，支持8G内存），在同事帮忙配置开发环境的时候，看着他们一路命令敲下来，真是酷啊，于是一冲动，卸载了原来的 win7 + ubuntu(32bit) 双系统，开始了纯正的 linux 之旅. 先坦白一下历经坎坷的 &lt;code&gt;dell&lt;/code&gt; 小本的血泪史:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;2011年元旦，它拔山涉水，从石家庄的中山路来到了北二环&lt;/li&gt;
&lt;li&gt;由纯正的 win7 血统 =&gt; win7旗舰版(伪)&lt;/li&gt;
&lt;li&gt;=&gt; vmware 虚拟机上装着各种系统的杂乱&lt;/li&gt;
&lt;li&gt;=&gt; win7 + ubuntu的双系统&lt;/li&gt;
&lt;li&gt;(小插曲)大四上半学期快结束的时候:2011-12-09:跟我来到了帝都&lt;/li&gt;
&lt;li&gt;=&gt; 完全开源的世界 linux(ubuntu) =。= EOF;&lt;/li&gt;
&lt;li&gt;// 内存：2G =&gt; 2G * 2 =&gt; 4G * 2&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;听说《鸟哥的linux私房菜》不错，可以在闲的无聊的时候看一看...&lt;/p&gt;

&lt;h2&gt;KVM vs VirtualBox&lt;/h2&gt;

&lt;h3&gt;Deferences&lt;/h3&gt;

&lt;p&gt;vbox 是由 qemu 改写而成，包含大量 qemu 代码。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;可以使用于&quot;不支持&quot;虚拟化技术的cpu。&lt;/li&gt;
&lt;li&gt;值得说的一点：vbox 在图形方面比较好，能进行2D 3D加速。&lt;/li&gt;
&lt;li&gt;但cpu控制不理想（估计是因为图形支持的缘故）。&lt;/li&gt;
&lt;li&gt;操作上有独立的图形界面，易于上手。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;kvm(Kernel-based Virtual Machine) 是linux内核包含的东西，使用qemu作为上层管理（命令行）。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;要求 cpu 必须支持虚拟化。&lt;/li&gt;
&lt;li&gt;性能：作为服务器很好，可是图形能力十分的差。即使放电影，图像也是像刷油漆一样，一层一层的。&lt;/li&gt;
&lt;li&gt;cpu使用率控制很好。&lt;/li&gt;
&lt;li&gt;控制上比较简洁，功能比较丰富：比如使用 “无敌功能” 所有更改指向内存，你的镜像永远保持干净。 “母镜像”功能让你拥有n个独立快照点。还有很多参数。另外，kvm作为内核级的虚拟机，刚开始发展关注的公司比较多——但是还没有达到商业应用的水平。&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;总体而言：在支持 虚拟化 的情况下，vbox 和 kvm 的性能差不多，主要是面向对象不同：kvm使用于服务器，vbox使用于桌面应用。&lt;/p&gt;

&lt;p&gt;如果要看性能对比：&lt;a href=&quot;http://os.51cto.com/art/201203/324172.htm&quot; title=&quot;Ubuntu 11.10 Xen、KVM 和 VirtualBox 比拼&quot;&gt;Ubuntu 11.10 Xen、KVM 和 VirtualBox 比拼&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里详细学一下 KVM，官网有详细的教程 &lt;a href=&quot;http://wiki.ubuntu.org.cn/Kvm%E6%95%99%E7%A8%8B&quot; title=&quot;Kvm 教程&quot;&gt;传送门&lt;/a&gt;&lt;/p&gt;

&lt;h3&gt;Fix BUG&lt;/h3&gt;

&lt;p&gt;by the way,当安装 VirtualBox 增强功能时，报这个错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Failed to open the CD/DVD image /home/malei/.VirtualBox/VBoxGuestAdditions_4.1.18.iso.
The medium '/home/malei/.VirtualBox/VBoxGuestAdditions_4.1.18.iso' can't be used as the requested device type
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我们可以这样解决：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install virtualbox-guest-additions
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;常用命令一览&lt;/h2&gt;

&lt;p&gt;他们很简单，但是初学者，你懂的&lt;/p&gt;

&lt;h3&gt;某端口被占用&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;sudo netstat -antup | grep &amp;lt;要查询的端口&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;example:&lt;/h4&gt;

&lt;p&gt;查找 &lt;code&gt;3306&lt;/code&gt; 端口被谁占用了:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo netstat -antup | grep 3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN      4090/mysqld 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;4090&lt;/code&gt; 就是他的端口&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kill 4090
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;杀掉他就行了&lt;/p&gt;

&lt;p&gt;如果不放心，在杀之前&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ps -ef | grep mysqld
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;果然，是那个进程号，杀对了&lt;/p&gt;

&lt;h3&gt;对一个文件夹下的目录和文件分别赋权限&lt;/h3&gt;

&lt;h4&gt;shell 脚本&lt;/h4&gt;

&lt;p&gt;写一个脚本(给他可执行的权限)，命名为 chmod.sh  放在目的路径下&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;for a in $(find .)
do
    if [ -d &quot;$a&quot; ]
        then
            chmod 755 $a
        else
            chmod 644 $a
    fi
done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后(貌似遇到文件或目录中有空格的 =。= 不行)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./chmod.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完事&lt;/p&gt;

&lt;h4&gt;避免麻烦，直接在 terminal 中敲命令&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;find . -type d -exec chmod 755 {} \;
find . -type f -exec chmod 644 {} \;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;搞定&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;
</content>
   </entry>
   
   <entry>
     <title>从 (97 & ~32) == 65 //true 入手js的位操作符</title>
     <link href="http://webcraft.malei.tk/articles/js-bitwise-operators"/>
     <updated>2013-02-22T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/js-bitwise-operators</id>
     <content type="html">&lt;h2&gt;先来个列表&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;操作符     用法      描述
按位与     a &amp;amp; b     如果两个操作数对应位都是 1 的话则在该位返回 1。
按位或     a | b     如果两个操作数对应位都是 0 的话则在该位返回 0。
按位异或   a ^ b     如果两个操作数对应位只有一个 1 的话则在该位返回 1。
求反       ~ a       反转操作数的每一位。
左移       a &amp;lt;&amp;lt; b    将 a 的二进制形式左移 b 位。右面的空位补零。
算术右移   a &amp;gt;&amp;gt; b       将 a 的二进制形式右移 b 位。忽略被移出的位。
逻辑右移   a &amp;gt;&amp;gt;&amp;gt; b    将 a 的二进制形式右移 b 位。忽略被移出的位，左侧补入 0。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;先知道一点：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;数据在内存中是以二进制形式存放的。数值是以补码表示的。一个正数的补码和其原码的形式相同。
而负数的补码方式是将其绝对值的二进制形式“按位求反再加1” 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;二元位操作符&lt;/h2&gt;

&lt;h3&gt;用作测试的函数&lt;/h3&gt;

&lt;p&gt;扔到console里直接用即可&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var hex10to2 = function (o){
    //鉴于parseInt('0101') 与 parseInt(0101) 的不同结果(纠结，各浏览器应该不同，待测试)，
    //在您输入的时候请直接输入8进制数时，请直接输入数字（0101）
    //测试用，所以先只支持整数

    if(parseInt(o)){
        return parseInt(o).toString(2);
    } else{
        console.log('参数不正确，正确的参数为：1.整数 2.合法字符串（如&quot;123&quot;,&quot;0123&quot;,&quot;0x123&quot;）');
    }   
}

//忽略符号处理
var hex2to10 = function(str){
    //TODO:判断是否只包括 1 , 0
    return parseInt(str,2);
}
//两个函数的合并作业待做
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;我还比较熟悉的： &lt;code&gt;&amp;amp;,|,^&lt;/code&gt; 三种，举例如下：&lt;/h3&gt;

&lt;p&gt;65 &amp;amp; 32 结果为 0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1000001
 100000
-------
0000000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;65 | 32 结果为 97&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1000001
 100000
-------
1100001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;65 ^ 32 结果为 97&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;1000001
 100000
-------
1100001
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;另外~很少用，也不熟悉&lt;/h3&gt;

&lt;h4&gt;详细说明&lt;/h4&gt;

&lt;p&gt;取反运算符~对运算数按位取反，将运算数各位值由1变为0，或由0变为1.因为计算机中数值以带符号位二进制表示，所以取反后，最高位符号位发生变化。&lt;/p&gt;

&lt;p&gt;32按位取反后结果为（-33）。我们采用32的8位二进制形式:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hex10to2(32) =&amp;gt; 100000 补全得：00100000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;00100000 按位取反为 11011111，这是一个补码形式，最高位为符号位。将该补码再求补（符号位保持不变，其他位按位取反，最后加1），得到10100001，该值是带符号的真值&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hex2to10('100001'); //33
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;加个负号得：-33&lt;/p&gt;

&lt;h4&gt;另外：&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;97 &amp;amp; -33 //65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将 -33（10100001）符号位保持不变，其他位按位取反，最后加1，为：11011111&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;01100001
11011111
--------
01000001

hex2to10('01000001'); //65
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;正如你看到的，原码和补码是可逆的, 写成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;97 &amp;amp; ~32
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;更一目了然一些，因为我只需要去掉从右向左数的第6个 1,那个1 =&gt; 2的（6-1）次方,所以 &lt;code&gt;&amp;amp;&lt;/code&gt; 一下 &lt;code&gt;~32&lt;/code&gt; 即可&lt;/p&gt;

&lt;h4&gt;位操作进行加减运算&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;... 64 32 16 8 4 2 1
...  7  6  5 4 3 2 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想让第x位变成 1，也就是加上 2 的 &lt;code&gt;x-1&lt;/code&gt; 次方（如果那位不是1的话）,令 y = 2 的 &lt;code&gt;x-1&lt;/code&gt; 次方&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x | y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果想让第x位变成 0，也就是减去 2 的 &lt;code&gt;x-1&lt;/code&gt; 次方（如果那位不是0的话）,令 y = 2 的 &lt;code&gt;x-1&lt;/code&gt; 次方&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;x &amp;amp; ~ y
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;有意思的实现&lt;/h3&gt;

&lt;h4&gt;手动大小写&lt;/h4&gt;

&lt;p&gt;因为javascript已经实现了（toUpperCase() and toLowerCase()）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isString(value){return typeof value == 'string';}

var manualLowercase = function(s) {
    return isString(s)
            ? s.replace(/[A-Z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) | 32);})
            : s;
};
var manualUppercase = function(s) {
    return isString(s)
            ? s.replace(/[a-z]/g, function(ch) {return String.fromCharCode(ch.charCodeAt(0) &amp;amp; ~32);})
            : s;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h4&gt;奇偶数判断&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;function isNumber(value){return typeof value == 'number';}

//利用 0 或 1 对 1 的 &amp;amp; 运算都是原数值，可得：
var isOdd = function(num){ //奇数
    if(isNumber(num)){
        return num &amp;amp; 1 ? true : false;
    } else{
        return false;
    }
}

var isEven = function(num){ //偶数           
    if(isNumber(num)){
        return num &amp;amp; 1 ? false : true;
    } else{
        return false;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;移位操作符&lt;/h2&gt;

&lt;p&gt;移位操作符需要两个操作数：第一个是要进行移位的数值，第二个指定要对第一个数移位的数目。移位的方向由使用的操作符决定。&lt;/p&gt;

&lt;p&gt;移位操作符将把两个操作符转换为 32 位整型数值，并返回与左操作数类型相同的结果。&lt;/p&gt;

&lt;h3&gt;&amp;lt;&amp;lt; (左移)&lt;/h3&gt;

&lt;p&gt;该操作符将把第一个操作数向左移若干位。移出的位将被忽略。右侧空位补零。
例如，9&amp;lt;&amp;lt;2 结果为 36，因为 1001 向左移两位变成 100100，这是 36。快捷算法:9 * (2的移位次方)&lt;/p&gt;

&lt;h3&gt;&gt;&gt; (算术右移)&lt;/h3&gt;

&lt;p&gt;该操作符将把第一个操作数向右移若干位。移出的位将被忽略。左侧的空位补上与原来最左面位相同的值。
例如，9&gt;&gt;2 结果为 2，因为 1001 右移两位变成 10，这是 2。。快捷算法:9 / (2的移位次方)&lt;/p&gt;

&lt;p&gt;反之，-9&gt;&gt;2 结果为 -3，因为要考虑到符号位。&lt;/p&gt;

&lt;p&gt;9在计算机中表示为(我们采用9的8位二进制形式)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00001001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则 -9，为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10001001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重复上面的算法：符号位保持不变，其他位按位取反，最后加1，得到 -9 在计算机中的表示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11110111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;算数右移两位 =&gt; 补1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11111101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重复补码算法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10000011
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到 -3&lt;/p&gt;

&lt;h3&gt;&gt;&gt;&gt; (逻辑右移)&lt;/h3&gt;

&lt;p&gt;该操作符将把第一个操作数向右移若干位。移出的位将被忽略。左侧的空位补零。
例如，19&gt;&gt;&gt;2 结果为 4，因为 10011 右移两位变成 100，这是 4。对于非负数，算术右移和逻辑右移结果相同。&lt;/p&gt;

&lt;p&gt;那么负数呢？&lt;/p&gt;

&lt;p&gt;-9&gt;&gt;2 结果为 ?&lt;/p&gt;

&lt;p&gt;9在计算机中表示为(我们采用9的8位二进制形式)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00001001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;则 -9，为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;10001001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;重复上面的算法：符号位保持不变，其他位按位取反，最后加1，得到 -9 在计算机中的表示&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;11110111
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;逻辑右移两位 =&gt; 补0&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;00111101
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;因为变成正数了，所以不用重复补码算法了&lt;/p&gt;

&lt;p&gt;计算机采用的是32位二进制形式，所以&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0011...1101 //中间是30个1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;得到 1073741821&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hex10to2(1073741821) //111111111111111111111111111101
&quot;111111111111111111111111111101&quot;.length //30,略去了前面两个0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.malei.tk/negative-number-binary&quot; title=&quot;原码，反码，补码&quot;&gt;原码，反码，补码&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>Node.js的调试</title>
     <link href="http://webcraft.malei.tk/articles/nodejs-debug"/>
     <updated>2013-02-17T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/nodejs-debug</id>
     <content type="html">&lt;h2&gt;Node.js调试 - 命令界面&lt;/h2&gt;

&lt;h3&gt;Node.js调试命令一览&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;命令                                       功能
run ------------------------------------- 执行脚本,在第一行暂停
restart --------------------------------- 重新执行脚本
cont, c --------------------------------- 继续执行,直到遇到下一个断点
next, n --------------------------------- 单步执行
step, s --------------------------------- 单步执行并进入函数
out, o ---------------------------------- 从函数中步出
setBreakpoint(), sb() ------------------- 在当前行设置断点
setBreakpoint(‘f()’), sb(...) ----------- 在函数f的第一行设置断点
setBreakpoint(‘script.js’, 20), sb(...) - 在 script.js 的第20行设置断点
clearBreakpoint, cb(...) ---------------- 清除所有断点
backtrace, bt --------------------------- 显示当前的调用栈
list(5) --------------------------------- 显示当前执行到的前后5行代码
watch(expr)  ---------------------------- 把表达式 expr 加入监视列表
unwatch(expr) --------------------------- 把表达式 expr 从监视列表移除
watchers -------------------------------- 显示监视列表中所有的表达式和值
repl ------------------------------------ 在当前上下文打开即时求值环境
kill ------------------------------------ 终止当前执行的脚本
scripts --------------------------------- 显示当前已加载的所有脚本
version --------------------------------- 显示 V8 的版本
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;新建js文件，并调试之&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ &amp;gt; node-debug.js
$ vi node-debug.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;随便写一点...&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var debugFoo = 'Node.js'
,debugBar = '~'
,debugFun = function(xxoo){
    console.log('I love you ' + xxoo + debugBar);
}

debugFun(debugFoo);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动调试&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node debug node-debug.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;结果&lt;/h3&gt;

&lt;p&gt;接下来就是胡乱的玩一下，玩熟了就可以应用到实际的调试过程中了&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt; debugger listening on port 5858
connecting... ok
break in node-debug.js:1
  1 var debugFoo = 'Node.js'
  2 ,debugBar = '~'
  3 ,debugFun = function(xxoo){
debug&amp;gt; sb(3)
  1 var debugFoo = 'Node.js'
  2 ,debugBar = '~'
* 3 ,debugFun = function(xxoo){
  4     console.log('I love you ' + xxoo + debugBar);
  5 }
  6 
debug&amp;gt; c
break in node-debug.js:7
  5 }
  6 
  7 debugFun(debugFoo);
  8 
  9 });
debug&amp;gt; s
break in node-debug.js:4
  2 ,debugBar = '~'
* 3 ,debugFun = function(xxoo){
  4     console.log('I love you ' + xxoo + debugBar);
  5 }
  6 
debug&amp;gt; repl
Press Ctrl + C to leave debug repl
&amp;gt; xxoo
'Node.js'
&amp;gt; de
decodeURI           decodeURIComponent  

debugBar            

&amp;gt; debugBar
'~'
debug&amp;gt; c
&amp;lt; I love you Node.js~
program terminated
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Node.js调试 - 图形界面&lt;/h2&gt;

&lt;p&gt;想更爽，玩的成本更低的调试 -。-&lt;/p&gt;

&lt;h3&gt;使用node-inspector&lt;/h3&gt;

&lt;p&gt;node-inspector 是一个完全基于 Node.js 的开源在线调试工具,提供了强大的调试功能和友好的用户界面,它的使用方法十分简便。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ npm install -g node-inspector //(时间略长)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;安装完成之后&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node --debug-brk=5858 node-debug.js
//(=5858可以不写，因为默认就是他，当然也可以写成别的)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在另一个终端中&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ node-inspector
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;浏览器中访问&lt;/h3&gt;

&lt;p&gt;有提示的，很爽&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;http://0.0.0.0:8080/debug?port=5858&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，就可以用熟悉的环境和方法，调试了&lt;/p&gt;

&lt;h3&gt;截图&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/images/articles/nodejs-debug/nodejs-debug-chrome.png&quot; title=&quot;在chrome中调试Node.js&quot; alt=&quot;nodejs-debug-chrome&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;结语&lt;/h2&gt;

&lt;p&gt;还是图形界面爽啊!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>写在新年第一天</title>
     <link href="http://webcraft.malei.tk/articles/happy-new-year-2013"/>
     <updated>2013-01-01T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/happy-new-year-2013</id>
     <content type="html">&lt;h2&gt;总述&lt;/h2&gt;

&lt;p&gt;玛雅人遗传下来的手卷——“德雷斯顿抄本”，并没有如期的使 2012/12/21 变为世界末日，这就使得 2013 有了可能，不！应该说 2013 已经来了，因为第一屡慢慢爬上窗户的曙光，宣告着新的一年的开始！&lt;/p&gt;

&lt;h2&gt;总结2012&lt;/h2&gt;

&lt;h3&gt;学业方面&lt;/h3&gt;

&lt;p&gt;这一年，从大三跨越到了大四，不知不觉中已经到了毕业季。匆匆忙忙的过完了大三的下半学期，没有什么印象太深刻的课程，只是在不断追寻着自己的爱好，自己以后想要从事的职业。Web前端，这个在同学间很非主流的职位，被我一无反顾的追逐着。因为我确实爱好这一块，虽然很菜，但是骨子里还是认为把自己喜欢的当成职业是一件很酷的事情。就这样慢慢积累着前端知识，一步一步的走着...&lt;/p&gt;

&lt;p&gt;过了一个充实的暑假，大四了。这学期还有两门课，缚住了前去企业实习的脚步（为了避免补考，重修，你懂的，老师很严格，缺一次课减5分）&lt;/p&gt;

&lt;h3&gt;面试实习&lt;/h3&gt;

&lt;p&gt;鉴于现状：小公司没有web前端的职位，或者有职位但不够重视。于是想去大平台尝试一番，因为我相信每个人都是遇强则强的，这样的机会可以促进自己快速成长（不想成为团队中猪一样的队友）。当然，我也不是一条路走到黑的那种，所以来北京带着两个求职意向：首选Web前端；其次PHP开发。&lt;/p&gt;

&lt;p&gt;在紧凑的时间安排上（周五 &lt;code&gt;2012-12-07&lt;/code&gt; 晚上考完最后一门试，周六同学小聚，周日就背上行囊来北京了），辗转面试(周一，周二，周三)，获得了三个offer，最后决定在sina云计算实习。周四 &lt;code&gt;2012-12-13&lt;/code&gt; ，来sina云计算实习了。&lt;/p&gt;

&lt;h2&gt;展望2013&lt;/h2&gt;

&lt;p&gt;相信未来总是美好的，在新的一年里，要在各方面（武装 / 改变）自己，Just Do It!&lt;/p&gt;
</content>
   </entry>
   
   <entry>
     <title>ubuntu配置github+git+jekyll环境</title>
     <link href="http://webcraft.malei.tk/articles/ubuntu-github-git-jekyll"/>
     <updated>2012-11-26T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/ubuntu-github-git-jekyll</id>
     <content type="html">&lt;h2&gt;总述&lt;/h2&gt;

&lt;p&gt;在 windows 中，如果我们只是在本地完成编码，然后在 github 上看效果，那么我们只需安装 &lt;a href=&quot;http://windows.github.com/&quot;&gt;github for windows&lt;/a&gt; 就可以了。如果要在本地编码调试还要看效果，那么推荐安装 RailsInstaller，里面包含了 Ruby、Rails、Bundler、Git、Sqlite、TinyTDS、SQL Server support 和 DevKit。我在 wnidows 用的是 github for windows + RailsInstaller 的方式，既有很好的本地与 github 交互的 metro 风格的客户端，又有在本地调试预览的环境。由于禁不住  metro 风格的诱惑，总是在用 metro 风格的客户端，git 命令到没怎么学，为了加强一下命令学习，遂玩一下 ubuntu 版的 git + github +jekyll。&lt;/p&gt;

&lt;h2&gt;安装 ruby 环境&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.ruby-lang.org/zh_cn/downloads/&quot;&gt;下载并安装 ruby&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;如果按照官网上的方法&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ruby irb rdoc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;稍微对配置做一下修改，把淘宝的镜像加到gem的镜像列表里&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem sources --remove http://rubygems.org/
$ gem sources -a http://ruby.taobao.org/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后用gem sources -l看看现在源列表&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;*** CURRENT SOURCES ***

http://ruby.taobao.org
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在终端输入 &lt;code&gt;ruby -v&lt;/code&gt; 或 &lt;code&gt;irb&lt;/code&gt; 或 &lt;code&gt;gem -v&lt;/code&gt; 或 &lt;code&gt;which gem&lt;/code&gt;，你会发现， ruby 已经安装好了。但是，当 &lt;code&gt;sudo gem install jekyll&lt;/code&gt; 时，会报错&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ERROR:  Error installing jekyll:
ERROR:  Failed to build gem native extension.
....
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;解决方案：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ruby-dev
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;solve the problem perfectly!&lt;/p&gt;

&lt;p&gt;如果你想用 RDiscount 取代 Maruku 作为你的Markdown标记语言转换引擎，只需确认安装：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gem install rdiscount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;并通过以下命令行参数执行Jekyll：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jekyll --rdiscount
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者也可以在你站点下的 _config.yml 文件中加入以下配置，以便以后每次执行时不必再指定命令行参数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;markdown: rdiscount
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;配置和使用github&lt;/h2&gt;

&lt;h3&gt;1、安装 git&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ sudo apt-get install git
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;2、检查SSH keys的设置&lt;/h3&gt;

&lt;p&gt;首先我们需要检查你电脑上现有的ssh key：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd ~/.ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果显示“No such file or directory”，跳到第四步，否则继续。&lt;/p&gt;

&lt;h3&gt;3、备份和移除原来的ssh key设置：&lt;/h3&gt;

&lt;p&gt;因为已经存在key文件，所以需要备份旧的数据并删除：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ls
config id_rsa id_rsa.pub known_hosts
$ mkdir key_backup
$ cp id_rsa* key_backup
$ rm id_rsa*
&lt;/code&gt;&lt;/pre&gt;

&lt;h3&gt;4、生成新的SSH Key：&lt;/h3&gt;

&lt;p&gt;输入下面的代码，就可以生成新的key文件，我们只需要默认设置就好，所以当需要输入文件名的时候，回车就好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot;
Generating public/private rsa key pair.
Enter file in which to save the key (/Users/your_user_directory/.ssh/id_rsa):&amp;lt;回车就好&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后系统会要你输入加密串（Passphrase）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Enter passphrase (empty for no passphrase):&amp;lt;输入加密串&amp;gt;
Enter same passphrase again:&amp;lt;再次输入加密串&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后看到这样的界面，就成功设置ssh key了：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/articles/ubuntu-github-git-jekyll/ubuntu-git.png&quot; alt=&quot;ubuntu-git&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;5、添加SSH Key到GitHub：&lt;/h3&gt;

&lt;p&gt;在本机设置SSH Key之后，需要添加到GitHub上，以完成SSH链接的设置。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/.ssh/id_rsa.pub
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后，复制其中的内容到 Account settings -&gt; SSH Keys，自己起一个能标识的名字，add 就可以了。&lt;/p&gt;

&lt;h3&gt;6、修改信息&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ git config --global user.name &quot;malei0311&quot;
$ git config --global user.email &quot;leiman0311@gmail.com&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2&gt;Clone自己的库&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;git clone git@github.com:malei0311/myBlog.git&lt;/li&gt;
&lt;li&gt;git add .表示添加当前目录下的所有文件&lt;/li&gt;
&lt;li&gt;git commit -am &quot;message&quot; 表示提交所有更改，这是提交到本地，”message” 换成自己的注释信息&lt;/li&gt;
&lt;li&gt;git push 把在本地的更改提交到远程服务器&lt;/li&gt;
&lt;/ul&gt;

</content>
   </entry>
   
   <entry>
     <title>Sublime Text 2 如何在 Ubuntu+iBus 下输入中文？</title>
     <link href="http://webcraft.malei.tk/articles/sublime_text_2-vs-ubuntu%2BiBus"/>
     <updated>2012-11-26T00:00:00+08:00</updated>
     <id>http://webcraft.malei.tk/articles/sublime_text_2-vs-ubuntu+iBus</id>
     <content type="html">&lt;h2&gt;解决方案&lt;/h2&gt;

&lt;p&gt;先安装能在sublime text 2显示中文的字体，有一个非常好的开源字体，叫做“文泉驿字体”，安装如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install xfonts-wqy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;官方网站：&lt;a href=&quot;http://wenq.org/index.cgi?%E9%A6%96%E9%A1%B5&quot;&gt;http://wenq.org/index.cgi?%E9%A6%96%E9%A1%B5&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;然后配置sublime text 2的 “Settings-User”，在里面加上：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;font_face&quot;: &quot;WenQuanYi Micro Hei Mono&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后安装一个sublime text 2的插件 InputHelper，用于输入中文，安装如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd ~/.config/sublime-text-2/Packages
git clone https://github.com/xgenvn/InputHelper.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;1.保证ibus/scim是在gtk程序下正常运行。&lt;/li&gt;
&lt;li&gt;2.Ctrl+Shift+Z 调出输入框（虽然不习惯也不爽，但能支持中文输入已经不错啦_^)&lt;/li&gt;
&lt;li&gt;3.在输入框窗口输入中文，然后按下Enter或者Ctrl+Enter键输入文字到sublime text 2&lt;/li&gt;
&lt;li&gt;4.点击&gt;右方向键或者End键把光标移动到最后，进行继续输入（回到1）&lt;/li&gt;
&lt;/ul&gt;


&lt;p&gt;说明：&lt;/p&gt;

&lt;p&gt;该插件只能在linux下使用，对于windows或者mac是不支持的。&lt;/p&gt;

&lt;h2&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://www.zhihu.com/question/20163104&quot;&gt;知乎&lt;/a&gt;&lt;/p&gt;
</content>
   </entry>
   
 
</feed>
